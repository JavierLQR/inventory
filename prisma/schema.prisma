generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String @unique
  password String

  role    Roles  @relation(fields: [rolesId], references: [id], onDelete: Cascade)
  rolesId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Roles {
  id   String   @id @default(uuid())
  name EnumRole
  User User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EnumRole {
  ADMIN
  STOREKEEPER
}

model Company {
  id                  String  @id @default(uuid())
  logo                String?
  businessName        String  @unique
  legalRepresentative String?
  address             String?
  phone               String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([businessName])
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  is_active Boolean @default(true)

  products  Product[]
  movements Movement[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([name])
}

model Product {
  id   String @id @default(uuid())
  name String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  movements Movement[]
  inventory Inventory?

  availableQuantity Int     @default(0)
  is_active         Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([name])
  @@index([categoryId])
  @@index([categoryId, name])
}

model Movement {
  id          String       @id @default(uuid())
  date        DateTime     @default(now())
  quantity    Int
  type        MovementType
  unit        UnitType     @relation(fields: [unitTypeId], references: [id])
  description String?

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String

  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  unitTypeId String

  @@index([date])
  @@index([productId])
  @@index([productId, date])
}

model Inventory {
  id          String  @id @default(uuid())
  quantity    Int
  description String?

  unityType  UnitType @relation(fields: [unitTypeId], references: [id], onDelete: Cascade)
  unitTypeId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([productId])
}

model UnitType {
  id        String      @id @default(uuid())
  name      String      @unique
  Movement  Movement[]
  Inventory Inventory[]
}

enum MovementType {
  INCOME
  OUTPUT
}
