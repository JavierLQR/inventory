generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String @unique
  password String

  rolesId String
  role    Roles  @relation(fields: [rolesId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Roles {
  id   String   @id @default(uuid())
  name EnumRole
  User User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id                  String  @id @default(uuid())
  ruc                 String
  corporate_reason    String
  logo                String?
  businessName        String  @unique
  legalRepresentative String?
  address             String?
  phone               String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([businessName])
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  is_active   Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  movements Movement[]
  products  Product[]

  @@index([name])
}

model Product {
  id                String     @id @default(uuid())
  name              String
  availableQuantity Int        @default(0)
  is_active         Boolean    @default(true)
  inventory         Inventory?

  movements Movement[]

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  typeProduct   TypeProduct @relation(fields: [typeProductId], references: [id])
  typeProductId String

  TypePresentation   TypePresentation? @relation(fields: [typePresentationId], references: [id])
  typePresentationId String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([name])
  @@index([categoryId])
  @@index([categoryId, name])
}

model Movement {
  id   String   @id @default(uuid())
  date DateTime @default(now())

  entry   Int?
  exit    Int?
  balance Int

  type           MovementType @relation(fields: [movementTypeId], references: [id], onDelete: Cascade)
  movementTypeId String

  description String?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  typeProductId String
  typeProduct   TypeProduct @relation(fields: [typeProductId], references: [id], onDelete: Cascade)

  TypePresentation   TypePresentation @relation(fields: [typePresentationId], references: [id], onDelete: Cascade)
  typePresentationId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([date])
  @@index([productId])
  @@index([productId, date])
}

model Inventory {
  id String @id @default(uuid())

  quantity Int
  minStock Int?
  maxStock Int?

  description String?

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  typeProductId String
  typeProduct   TypeProduct @relation(fields: [typeProductId], references: [id], onDelete: Cascade)

  TypePresentation   TypePresentation? @relation(fields: [typePresentationId], references: [id])
  typePresentationId String?

  entry_date DateTime @default(now())

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([productId])
}

model TypeProduct {
  id   String @id @default(uuid())
  name String @unique

  Inventory Inventory[]
  Movement  Movement[]
  Product   Product[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model TypePresentation {
  id   String @id @default(uuid())
  name String @unique

  Inventory Inventory[]
  Movement  Movement[]
  Product   Product[]
}

model MovementType {
  id       String         @id @default(cuid())
  name     TypesMovements @unique
  Movement Movement[]
}

enum EnumRole {
  ADMIN
  ALMACENERO
}

enum TypesMovements {
  ENTRADA
  SALIDA
}
