generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String @unique
  password String

  rolesId String
  role    Roles  @relation(fields: [rolesId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Roles {
  id   String   @id @default(uuid())
  name EnumRole
  User User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id                  String   @id @default(uuid())
  logo                String?
  businessName        String   @unique
  legalRepresentative String?
  address             String?
  phone               String?
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())

  @@index([businessName])
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  is_active   Boolean    @default(true)
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  movements   Movement[]
  products    Product[]

  @@index([name])
}

model Product {
  id                String     @id @default(uuid())
  name              String
  availableQuantity Int        @default(0)
  is_active         Boolean    @default(true)
  inventory         Inventory?

  movements Movement[]

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([name])
  @@index([categoryId])
  @@index([categoryId, name])
}

model Movement {
  id          String       @id @default(uuid())
  date        DateTime     @default(now())
  quantity    Int
  type        MovementType
  description String?
  categoryId  String
  productId   String
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  unitTypeId  String
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  unit        UnitType     @relation(fields: [unitTypeId], references: [id])

  @@index([date])
  @@index([productId])
  @@index([productId, date])
}

model Inventory {
  id          String  @id @default(uuid())
  quantity    Int
  description String?
  productId   String  @unique
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  unitTypeId String
  unityType  UnitType @relation(fields: [unitTypeId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([productId])
}

model UnitType {
  id        String      @id @default(uuid())
  name      String      @unique
  Inventory Inventory[]
  Movement  Movement[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum EnumRole {
  ADMIN
  STOREKEEPER
}

enum MovementType {
  INCOME
  OUTPUT
}
